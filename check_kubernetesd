#!/usr/bin/env python3
""" kubernetes zabbix monitoring daemon
    - tries to read config from file (host, port, token)
    - sends data to zabbix
    - sends data to inventory REST-API
"""
import os

import sys
import importlib.util

import logging
import signal
import time

from modules.daemon_thread import CheckKubernetesDaemon

KNOWN_ACTIONS = ['discover', 'get']

formatter = logging.Formatter('%(asctime)s - %(threadName)s : %(name)s - %(levelname)s - %(message)s')
stream = logging.StreamHandler(sys.stdout)
stream.setFormatter(formatter)

logger = logging.getLogger()

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(sys.argv[0] + " <CONFIG_NAME>|<executable>")
        sys.exit(1)

    if sys.argv[1].startswith("/bin/"):
        os.system(sys.argv[1])
        sys.exit(1)

    config_name = sys.argv[1]

    try:
        config = importlib.import_module(config_name)
    except ImportError:
        print("config file %s.py not found. ABORTING!" % config_name)
        sys.exit(1)

    for key in ["k8s_api_host", "k8s_api_token", "verify_ssl", "debug", "zabbix_server", "zabbix_host",
                "discovery_interval_slow", "data_interval_slow",
                "discovery_interval_fast", "data_interval_fast"]:
        if key.upper() in os.environ and os.environ[key.upper()] != "":
            print("setting %s by environment variable %s" % (key, key.upper()))
            vars()[key] = os.environ[key.upper()]

    if config.debug:
        stream.setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logger.addHandler(stream)

    daemons = list()

    daemons.append(CheckKubernetesDaemon(config, config_name, ['nodes', 'components', 'tls', 'services'],
                                         config.discovery_interval_slow, config.data_interval_slow))

    daemons.append(CheckKubernetesDaemon(config, config_name, ['deployments', 'pods'],
                                         config.discovery_interval_slow, config.data_interval_fast))

    try:
        logger.info("Starting daemon threads now")
        for daemon in daemons:
            daemon.run()
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        daemon.handler(signal.SIGTERM)
        time.sleep(3)
        daemon.handler(signal.SIGKILL)
