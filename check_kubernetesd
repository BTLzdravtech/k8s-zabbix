#!/usr/bin/env python3
""" kubernetes zabbix monitoring daemon
    - tries to read config from file (host, port, token)
    - sends data to zabbix
    - sends data to inventory REST-API
"""
import argparse
import faulthandler
import importlib.util
import logging
import os
import re
import signal
import sys

import coloredlogs as coloredlogs
import sentry_sdk
import time

from base.config import Configuration
from base.daemon_thread import CheckKubernetesDaemon, str2bool

KNOWN_ACTIONS = ['discover', 'get']

formatter = logging.Formatter(
    '%(asctime)s - %(threadName)s : {%(pathname)s:%(lineno)d} : %(levelname)s : %(name)s - %(message)s')
stream = logging.StreamHandler(sys.stdout)
stream.setFormatter(formatter)

coloredlogs.install()

logger = logging.getLogger()


def to_array(list_string):
    if isinstance(list_string, list):
        return list_string
    else:
        return re.split(r"[\s,]+", config.web_api_resources_exclude.strip())


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Monitoring daemon for kubernetes'
    )

    args, remaining_args = parser.parse_known_args()

    if len(remaining_args) < 1:
        parser.error('add <CONFIG_NAME> or <executable>')
        sys.exit(1)

    if remaining_args[0].startswith("/bin/"):
        os.system(remaining_args[0])
        sys.exit(1)

    config_name = remaining_args[0]
    try:
        config = Configuration()
        config.load_config_file()
        config.load_from_environment_variables()
    except ImportError:
        print(f"config file {config_name} not found. ABORTING!")
        sys.exit(1)

    if str2bool(config.sentry_enabled):
        logger.info("starting with sentry DSN %s" % config.sentry_dsn)
        config.sentry_enabled = True
        if not config.sentry_dsn:
            print("sentry enabled but no DNS set: '%s'! ABORTING!" % config.sentry_dsn)
        sentry_sdk.init(config.sentry_dsn)

    if str2bool(config.zabbix_debug):
        logger.info("starting with zabbix debug")
        config.zabbix_debug = True
        log = logging.getLogger('pyzabbix')
        log.setLevel(logging.DEBUG)
    else:
        log = logging.getLogger('pyzabbix')
        log.setLevel(logging.INFO)

    if str2bool(config.debug):
        stream.setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logger.addHandler(stream)

    daemons = list()

    web_api_resources_exclude = to_array(config.web_api_resources_exclude)
    zabbix_resources_exclude = to_array(config.zabbix_resources_exclude)
    resources_exclude = to_array(config.resources_exclude)

    mgmt_daemon = CheckKubernetesDaemon(config, config_name,
                                        ['nodes'],
                                        resources_exclude, web_api_resources_exclude, zabbix_resources_exclude,
                                        config.discovery_interval_slow, config.resend_data_interval_slow)
    daemons.append(mgmt_daemon)

    daemons.append(
        CheckKubernetesDaemon(config, config_name,
                              # ['components', 'services', 'pvcs'],
                              ['components', 'pvcs'],
                              resources_exclude, web_api_resources_exclude, zabbix_resources_exclude,
                              config.discovery_interval_slow, config.resend_data_interval_fast))

    daemons.append(
        CheckKubernetesDaemon(config, config_name,
                              # ['deployments', 'statefulsets', 'daemonsets', 'pods', 'containers',
                              # 'ingresses', 'containers', 'pods'],
                              ['deployments', 'statefulsets'],
                              resources_exclude, web_api_resources_exclude, zabbix_resources_exclude,
                              config.discovery_interval_slow, config.resend_data_interval_slow))

    if config.debug_k8s_events:
        for daemon in daemons:
            daemon.debug_k8s_events = True


    # SIGNAL processing
    def _signal_handler(signum, *args):
        mgmt_daemon.handler(signum)


    def stacktraces_and_terminate(signum, frame):
        print("#" * 80)
        print("# Threadump")
        faulthandler.dump_traceback()
        print("#")
        print("#" * 80)
        sys.exit(1)


    signal.signal(signal.SIGQUIT, stacktraces_and_terminate)
    signal.signal(signal.SIGUSR1, _signal_handler)
    signal.signal(signal.SIGUSR2, _signal_handler)

    # Daemon start
    try:
        logger.info("Starting daemon threads now")
        for daemon in daemons:
            daemon.run()
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        logger.info("got SIGINT, shutting down")
        for daemon in daemons:
            daemon.handler(signal.SIGTERM)
        sys.exit(1)
