#!/usr/bin/env python3
""" kubernetes zabbix monitoring daemon
    - tries to read config from file (host, port, token)
    - sends data to zabbix
    - sends data to inventory REST-API
"""
import os

import sys
import importlib.util

import logging
import signal
import time
import argparse

from modules.daemon_thread import CheckKubernetesDaemon

KNOWN_ACTIONS = ['discover', 'get']

formatter = logging.Formatter('%(asctime)s - %(threadName)s : %(levelname)s : %(name)s - %(message)s')
stream = logging.StreamHandler(sys.stdout)
stream.setFormatter(formatter)

logger = logging.getLogger()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Monitoring daemon for kubernetes'
    )

    args, remaining_args = parser.parse_known_args()

    if len(remaining_args) < 1:
        parser.error('add <CONFIG_NAME> or <executable>')
        sys.exit(1)

    if remaining_args[0].startswith("/bin/"):
        os.system(remaining_args[0])
        sys.exit(1)

    config_name = remaining_args[0]

    try:
        config = importlib.import_module(config_name)
    except ImportError:
        print("config file %s.py not found. ABORTING!" % config_name)
        sys.exit(1)

    with open('config_default.py', 'r') as fh:
        content_lines = fh.read().split('\n')

    for key, val in [x.split('=') for x in content_lines if x]:
        key = key.strip()
        if key.upper() in os.environ and os.environ[key.upper()] != "":
            print("setting %s by environment variable %s" % (key, key.upper()))
            setattr(config, key, os.environ[key.upper()])

    if config.zabbix_debug:
        logger.info("starting with zabbix debug")
        config.zabbix_debug = True
        log = logging.getLogger('pyzabbix')
        log.setLevel(logging.DEBUG)
    else:
        log = logging.getLogger('pyzabbix')
        log.setLevel(logging.INFO)

    if config.debug:
        stream.setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    logger.addHandler(stream)

    daemons = list()

    mgmt_daemon = CheckKubernetesDaemon(config, config_name, ['nodes', 'secrets'],
                                        config.discovery_interval_slow, config.data_interval_fast)
    daemons.append(mgmt_daemon)

    daemons.append(CheckKubernetesDaemon(config, config_name, ['components', 'services'],
                                         config.discovery_interval_slow, config.data_interval_fast))

    daemons.append(CheckKubernetesDaemon(config, config_name, ['deployments', 'statefulsets', 'daemonsets', 'pods', 'containers'],
                                         config.discovery_interval_slow, config.data_interval_fast))

    if config.debug_k8s_events:
        for daemon in daemons:
            daemon.debug_k8s_events = True

    # SIGNAL processing
    def _signal_handler(signum, *args):
        mgmt_daemon.handler(signum)

    signal.signal(signal.SIGUSR1, _signal_handler)
    signal.signal(signal.SIGUSR2, _signal_handler)

    # Daemon start
    try:
        logger.info("Starting daemon threads now")
        for daemon in daemons:
            daemon.run()
        while True:
            for daemon in daemons:
                if daemon.dirty_threads:
                    daemon.restart_dirty_threads()
            time.sleep(3)
    except KeyboardInterrupt:
        for daemon in daemons:
            daemon.handler(signal.SIGTERM)

        time.sleep(3)
        for daemon in daemons:
            daemon.handler(signal.SIGKILL)
